{"dependencies":[{"name":"/Users/samuelbillaud/Documents/Developpement/portfolio092018/package.json","includedInParent":true,"mtime":1536680830515},{"name":"/Users/samuelbillaud/Documents/Developpement/portfolio092018/node_modules/data.js/package.json","includedInParent":true,"mtime":1536680829375},{"name":"csv-parse","loc":{"line":1,"column":22}},{"name":"csv-sniffer","loc":{"line":2,"column":27}},{"name":"stream-to-string","loc":{"line":3,"column":25}},{"name":"iconv-lite","loc":{"line":4,"column":22}}],"generated":{"js":"const parse = require('csv-parse')\nconst CSVSniffer = require(\"csv-sniffer\")()\nconst toString = require('stream-to-string')\nconst iconv = require('iconv-lite')\n\nconst csvParser = async (file, keyed = false) => {\n  const parseOptions = await getParseOptions(file, keyed)\n  const stream = await file.stream()\n  if (file.descriptor.encoding.toLowerCase().replace('-', '') === 'utf8') {\n    return stream.pipe(parse(parseOptions))\n  } else { // non utf-8 files are decoded by iconv-lite module\n    return stream.pipe(iconv.decodeStream(file.descriptor.encoding)).pipe(parse(parseOptions))\n  }\n}\n\nconst guessParseOptions = async (file) => {\n  const possibleDelimiters = [',', ';', ':', '|', '\\t', '^', '*', '&']\n  const sniffer = new CSVSniffer(possibleDelimiters)\n  let text = ''\n  // We assume that reading first 1M bytes is enough to detect delimiter, line terminator etc.:\n  if (file.descriptor.pathType === 'local') {\n    const stream = await file.stream({end: 1000000})\n    text = await toString(stream)\n  } else if (file.descriptor.pathType === 'remote') {\n    const stream = await file.stream()\n    let bytes = 0\n    await new Promise((resolve, reject) => {\n      stream\n        .on('data', (chunk) => {\n          bytes += chunk.length\n          if (bytes > 1000000) {\n            stream.pause()\n            resolve()\n          } else {\n            text += chunk.toString()\n          }\n        })\n        .on('end', () => {\n          resolve()\n        })\n    })\n  }\n  const results = sniffer.sniff(text)\n  return {\n    delimiter: results.delimiter,\n    quote: results.quoteChar || '\"'\n  }\n}\n\nconst getParseOptions = async (file, keyed) => {\n  let parseOptions = {\n    columns: keyed ? true : null,\n    ltrim: true\n  }\n  if (file.descriptor.dialect) {\n    parseOptions.delimiter = file.descriptor.dialect.delimiter || ','\n    parseOptions.rowDelimiter = file.descriptor.dialect.lineTerminator\n    parseOptions.quote = file.descriptor.dialect.quoteChar || '\"'\n    if (file.descriptor.dialect.doubleQuote !== undefined && dialect.doubleQuote === false) {\n      parseOptions.escape = ''\n    }\n  } else {\n    const guessedParseOptions = await guessParseOptions(file)\n    // Merge guessed parse options with default one:\n    parseOptions = Object.assign(parseOptions, guessedParseOptions)\n  }\n\n  return parseOptions\n}\n\nmodule.exports = {\n  csvParser,\n  getParseOptions,\n  guessParseOptions\n}\n","map":{"mappings":[{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}}],"sources":{"node_modules/data.js/lib/parser/csv.js":"const parse = require('csv-parse')\nconst CSVSniffer = require(\"csv-sniffer\")()\nconst toString = require('stream-to-string')\nconst iconv = require('iconv-lite')\n\nconst csvParser = async (file, keyed = false) => {\n  const parseOptions = await getParseOptions(file, keyed)\n  const stream = await file.stream()\n  if (file.descriptor.encoding.toLowerCase().replace('-', '') === 'utf8') {\n    return stream.pipe(parse(parseOptions))\n  } else { // non utf-8 files are decoded by iconv-lite module\n    return stream.pipe(iconv.decodeStream(file.descriptor.encoding)).pipe(parse(parseOptions))\n  }\n}\n\nconst guessParseOptions = async (file) => {\n  const possibleDelimiters = [',', ';', ':', '|', '\\t', '^', '*', '&']\n  const sniffer = new CSVSniffer(possibleDelimiters)\n  let text = ''\n  // We assume that reading first 1M bytes is enough to detect delimiter, line terminator etc.:\n  if (file.descriptor.pathType === 'local') {\n    const stream = await file.stream({end: 1000000})\n    text = await toString(stream)\n  } else if (file.descriptor.pathType === 'remote') {\n    const stream = await file.stream()\n    let bytes = 0\n    await new Promise((resolve, reject) => {\n      stream\n        .on('data', (chunk) => {\n          bytes += chunk.length\n          if (bytes > 1000000) {\n            stream.pause()\n            resolve()\n          } else {\n            text += chunk.toString()\n          }\n        })\n        .on('end', () => {\n          resolve()\n        })\n    })\n  }\n  const results = sniffer.sniff(text)\n  return {\n    delimiter: results.delimiter,\n    quote: results.quoteChar || '\"'\n  }\n}\n\nconst getParseOptions = async (file, keyed) => {\n  let parseOptions = {\n    columns: keyed ? true : null,\n    ltrim: true\n  }\n  if (file.descriptor.dialect) {\n    parseOptions.delimiter = file.descriptor.dialect.delimiter || ','\n    parseOptions.rowDelimiter = file.descriptor.dialect.lineTerminator\n    parseOptions.quote = file.descriptor.dialect.quoteChar || '\"'\n    if (file.descriptor.dialect.doubleQuote !== undefined && dialect.doubleQuote === false) {\n      parseOptions.escape = ''\n    }\n  } else {\n    const guessedParseOptions = await guessParseOptions(file)\n    // Merge guessed parse options with default one:\n    parseOptions = Object.assign(parseOptions, guessedParseOptions)\n  }\n\n  return parseOptions\n}\n\nmodule.exports = {\n  csvParser,\n  getParseOptions,\n  guessParseOptions\n}\n"},"lineCount":76}},"hash":"90aff599f6eadc3f93c1b98d6829f953","cacheData":{"env":{}}}